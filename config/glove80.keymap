/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        TD_Left_Arrow: TD_Left_Arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LEFT_ARROW";
            #binding-cells = <0>;
            bindings =
                <&mt LS(LEFT_ARROW) LEFT_ARROW>,
                <&mt LC(LS(LEFT_ARROW)) LC(LEFT_ARROW)>;
        };

        TD_Up_Arrow: TD_Up_Arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_UP_ARROW";
            #binding-cells = <0>;
            bindings =
                <&mt LS(UP_ARROW) UP_ARROW>,
                <&mt LC(LS(UP_ARROW)) LC(UP_ARROW)>;
        };

        TD_Down_Arrow: TD_Down_Arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOWN_ARROW";
            #binding-cells = <0>;
            bindings =
                <&mt LS(DOWN_ARROW) DOWN_ARROW>,
                <&mt LC(LS(DOWN_ARROW)) LC(DOWN_ARROW)>;
        };

        TD_Right_arrow: TD_Right_arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RIGHT_ARROW";
            #binding-cells = <0>;
            bindings =
                <&mt LS(RIGHT_ARROW) RIGHT_ARROW>,
                <&mt LC(LS(RIGHT_ARROW)) LC(RIGHT_ARROW)>;
        };

        TD_Enter: TD_Enter {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ENTER";
            #binding-cells = <0>;
            bindings = <&mt LS(ENTER) ENTER>, <&mt LC(ENTER) LA(ENTER)>;
        };

        TD_Tab: TD_Tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TAB";
            #binding-cells = <0>;
            bindings = <&mt LC(TAB) TAB>, <&kp LC(LS(TAB))>;
        };

        TD_Space: TD_Space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPACE";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT SPACE>, <&kp LS(SPACE)>;
        };

        LeftIndex: LeftIndex {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTINDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <420>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <350>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 41 42 43 56 57 58 59 60 61 73 74 75 76 77 52 53 69 70 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 39 46 47 48 49 50 51 52 64 65 66 67 68 69 23 48 49 23 35 36 37 38 48 49 50>;
        };

        LeftMiddle: LeftMiddle {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTMIDDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <460>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 70 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 41 42 43 56 57 58 59 60 61 73 74 75 76 77 0 1 2 3 4 10 11 12 13 14 22 34 46 66 67 68 64 65 15 27 39 51 69 11 23 24 25 26 27 47 48 49 50 66 67 68 23 35 36 37 38 39 48 49 50 51>;
        };

        LeftRing: LeftRing {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTRING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <490>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 70 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 41 42 43 56 57 58 59 60 61 73 74 75 76 77 0 1 2 3 4 10 11 12 13 14 22 34 46 66 67 68 64 65 15 27 39 51 69 47 48 49 50 66 67 68 11 23 24 25 26 27 23 35 36 37 38>;
        };

        LeftPinky: LeftPinky {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTPINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <510>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 70 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 41 42 43 56 57 58 59 60 61 73 74 75 76 77 0 1 2 3 4 10 11 12 13 14 22 34 46 66 67 68 64 65 15 27 39 51 69 47 48 49 50 51 66 67 68 10 11 12 13 14 15 22 23 24 25 26 27 39 23 35 36 37 38>;
        };

        RightIndex: RightIndex {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTINDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <420>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <350>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 56 57 58 59 60 61 73 74 75 76 77 52 53 69 70 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 39 46 47 48 49 50 51 52 64 65 66 67 68 69 23 48 49 35 36 37 38 47 48 49 50 32 41 42 43 44>;
        };

        RightMiddle: RightMiddle {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTMIDDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <460>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 70 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 56 57 58 59 60 61 73 74 75 76 77 0 1 2 3 4 10 11 12 13 14 22 34 46 66 67 68 64 65 15 27 39 51 69 11 23 24 25 26 27 47 48 49 50 66 67 68 35 36 37 38 32 41 42 43 44>;
        };

        RightRing: RightRing {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTRING";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <490>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 70 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 56 57 58 59 60 61 73 74 75 76 77 0 1 2 3 4 10 11 12 13 14 22 34 46 66 67 68 64 65 15 27 39 51 69 47 48 49 50 66 67 68 11 23 24 25 26 27 23 35 36 37 38 39 40 41 42 43 44 45 58 59 60 61>;
        };

        RightPinky: RightPinky {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTPINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <510>;
            quick-tap-ms = <550>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <52 53 54 70 71 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 45 58 59 60 61 62 63 74 75 76 77 78 79 55 56 72 5 6 7 16 17 18 19 28 29 30 31 40 56 57 58 59 60 61 73 74 75 76 77 0 1 2 3 4 10 11 12 13 14 22 34 46 66 67 68 64 65 15 27 39 51 69 47 48 49 50 51 66 67 68 10 11 12 13 14 15 22 23 24 25 26 27 39 23 24 25 26 27 35 36 37 38 39 48 49 50 51 32 33 41 42 43 44 45 59 60 61>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        LDel {
            bindings = <&kp DELETE>;
            key-positions = <38 37>;
            layers = <0 2>;
        };

        RDel {
            bindings = <&kp DELETE>;
            key-positions = <42 41>;
            layers = <0 2>;
        };

        LEnter {
            bindings = <&kp ENTER>;
            key-positions = <38 35>;
            layers = <0 2>;
        };

        LText_extract {
            bindings = <&kp LG(LS(E))>;
            key-positions = <26 25 24>;
            layers = <0 1>;
        };

        RText_extract {
            bindings = <&kp LG(LS(E))>;
            key-positions = <29 30 31>;
            layers = <0 2>;
        };

        LCaps_Word {
            bindings = <&caps_word>;
            key-positions = <50 47>;
            layers = <0 2>;
        };

        RCaps_Word {
            bindings = <&caps_word>;
            key-positions = <59 62>;
            layers = <0 2>;
        };

        LAltEnter {
            bindings = <&kp LA(ENTER)>;
            key-positions = <38 37 36 35>;
            layers = <0 2>;
        };

        RAltEnter {
            bindings = <&kp LA(ENTER)>;
            key-positions = <41 42 43 44>;
            layers = <0 2>;
        };

        REnter {
            bindings = <&kp ENTER>;
            key-positions = <41 44>;
            layers = <0 2>;
        };

        LToLayer1 {
            bindings = <&to 1>;
            key-positions = <52 69>;
        };

        RToLayer1 {
            bindings = <&to 1>;
            key-positions = <57 74>;
        };

        LToLayer2 {
            bindings = <&to 2>;
            key-positions = <53 70>;
        };

        RToLayer2 {
            bindings = <&to 2>;
            key-positions = <56 73>;
        };

        LToLayer3 {
            bindings = <&to 3>;
            key-positions = <54 71>;
        };

        RToLayer3 {
            bindings = <&to 3>;
            key-positions = <55 72>;
        };

        CTRLAltDel {
            bindings = <&kp LC(LA(DEL))>;
            key-positions = <72 73 74>;
        };

        LToLayer0 {
            bindings = <&to 0>;
            key-positions = <65 66 67 68>;
        };

        RToLayer0 {
            bindings = <&to 0>;
            key-positions = <75 76 77 78>;
        };

        LCtrlDel {
            bindings = <&kp LC(DELETE)>;
            key-positions = <37 36 38>;
            layers = <0 2>;
        };

        RCtrlDel {
            bindings = <&kp LC(DELETE)>;
            key-positions = <41 42 43>;
            layers = <0 2>;
        };

        LSpace {
            bindings = <&kp SPACE>;
            key-positions = <37 36>;
            layers = <0 2>;
        };

        RSpace {
            bindings = <&kp SPACE>;
            key-positions = <42 43>;
            layers = <0 2>;
        };

        LBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <36 35>;
            layers = <0 2>;
        };

        RBackspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <43 44>;
            layers = <0 2>;
        };

        LCtrlBackspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <36 35 37>;
            layers = <0 2>;
        };

        RCtrlBackspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <44 43 42>;
            layers = <0 2>;
        };

        CtrlUp {
            bindings = <&mt LS(LC(UP_ARROW)) LC(UP_ARROW)>;
            key-positions = <52 25>;
        };

        CtrlDown {
            bindings = <&mt LS(LC(DOWN_ARROW)) LC(DOWN_ARROW)>;
            key-positions = <52 37>;
        };

        CtrlLeft {
            bindings = <&mt LS(LC(LEFT_ARROW)) LC(LEFT_ARROW)>;
            key-positions = <52 36>;
        };

        CtrlRight {
            bindings = <&mt LS(LC(RIGHT_ARROW)) LC(RIGHT_ARROW)>;
            key-positions = <52 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp PRINTSCREEN   &kp HOME               &kp PAGE_UP           &kp PAGE_DOWN             &kp END                                                                                                                                               &kp HOME             &kp PAGE_UP                 &kp PAGE_DOWN           &kp END                 &kp PRINTSCREEN
&kp GRAVE         &kp N1                 &kp N2                &kp N3                    &kp N4              &kp N5                                                                                                                    &kp N6  &kp N7               &kp N8                      &kp N9                  &kp N0                  &kp BACKSLASH
&TD_Tab           &kp Q                  &kp W                 &kp F                     &kp P               &kp B                                                                                                                     &kp J   &kp L                &kp U                       &kp Y                   &kp SQT                 &kp SLASH
&caps_word        &LeftPinky LEFT_WIN A  &LeftRing LEFT_ALT R  &LeftMiddle LEFT_SHIFT S  &LeftIndex LCTRL T  &kp G                                                                                                                     &kp M   &RightIndex RCTRL N  &RightMiddle RIGHT_SHIFT E  &RightRing RIGHT_ALT I  &RightPinky LEFT_GUI O  &kp SEMICOLON
&kp ESC           &kp Z                  &kp X                 &kp C                     &kp D               &kp V   &lt 1 TAB  &lt 2 ENTER             &lt 3 ESCAPE         &kp ESCAPE        &mt LEFT_ALT ENTER       &mt RCTRL TAB  &kp K   &kp H                &kp COMMA                   &kp DOT                 &kp MINUS               &kp EQUAL
&kp LEFT_BRACKET  &kp LEFT_ARROW         &kp UP_ARROW          &kp DOWN_ARROW            &kp RIGHT_ARROW             &TD_Space  &mt LEFT_ALT BACKSPACE  &mt LEFT_GUI DELETE  &mt LEFT_WIN DEL  &mt RIGHT_ALT BACKSPACE  &TD_Space              &kp LEFT_ARROW       &kp DOWN_ARROW              &kp UP_ARROW            &kp RIGHT_ARROW         &kp RIGHT_BRACKET
            >;
        };

        NavFN {
            bindings = <
&kp PRINTSCREEN     &kp SYSREQ         &kp PAUSE_BREAK      &kp SCROLLLOCK  &kp INS                                                                                                                      &kp INSERT      &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp SYSREQ       &kp PRINTSCREEN
&none               &none              &none                &none           &none                        &none                                                                                    &none  &none           &none           &none            &none            &none
&TD_Tab             &mt LC(HOME) HOME  &mt LC(PG_UP) PG_UP  &TD_Up_Arrow    &mt LC(PAGE_DOWN) PAGE_DOWN  &mt LC(END) END                                                                          &none  &kp F1          &kp F2          &kp F3           &mt LA(F4) F4    &none
&sk LEFT_WIN        &sk LCTRL          &TD_Left_Arrow       &TD_Down_Arrow  &TD_Right_arrow              &kp LC(Y)                                                                                &none  &mt RS(F5) F5   &kp F6          &kp F7           &kp F8           &none
&kp ESC             &kp LC(Z)          &mt LC(LS(X)) LC(X)  &kp LC(C)       &TD_Enter                    &mt LC(LS(V)) LC(V)  &trans          &trans        &trans        &trans  &trans  &trans  &none  &kp F9          &kp F10         &kp F11          &mt LS(F12) F12  &none
&kp K_CONTEXT_MENU  &TD_Left_Arrow     &TD_Up_Arrow         &TD_Down_Arrow  &TD_Right_arrow                                   &sk LEFT_SHIFT  &sk LEFT_ALT  &sk LEFT_GUI  &trans  &trans  &trans         &TD_Left_Arrow  &TD_Down_Arrow  &TD_Up_Arrow     &TD_Right_arrow  &kp K_CONTEXT_MENU
            >;
        };

        SymNum {
            bindings = <
&kp PRINTSCREEN     &kp SYSREQ                   &kp PAUSE_BREAK                &kp SCROLLLOCK         &kp INS                                                                                                                                                                                   &kp KP_NUM                    &none                   &none                         &none            &kp PRINTSCREEN
&none               &none                        &none                          &none                  &none                  &none                                                                                                                                            &kp K_CALCULATOR  &kp K_PASTE                   &kp K_COPY              &kp K_CUT                     &none            &none
&TD_Tab             &kp EXCLAMATION              &kp AT_SIGN                    &kp HASH               &kp DOLLAR             &kp PERCENT                                                                                                                                      &kp KP_MULTIPLY   &mt LC(N7) KP_NUMBER_7        &mt LC(N8) KP_NUMBER_8  &mt LC(N9) KP_NUMBER_9        &kp KP_DIVIDE    &kp PERCENT
&mt TILDE GRAVE     &kp CARET                    &kp AMPERSAND                  &mt DOUBLE_QUOTES SQT  &mt SEMICOLON COLON    &mt QUESTION EQUAL                                                                                                                               &kp KP_PLUS       &mt LC(NUMBER_4) KP_NUMBER_4  &mt LC(N5) KP_NUMBER_5  &mt LC(NUMBER_6) KP_NUMBER_6  &mt UNDER MINUS  &kp LEFT_PARENTHESIS
&kp ESC             &mt LEFT_BRACKET LEFT_BRACE  &mt RIGHT_BRACE RIGHT_BRACKET  &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS  &mt PIPE NON_US_BACKSLASH  &trans     &trans                  &trans            &trans               &trans                   &trans             &kp KP_PLUS       &mt LC(NUMBER_1) KP_NUMBER_1  &mt LC(NUMBER_2) KP_N2  &mt LC(NUMBER_3) KP_NUMBER_3  &mt MINUS UNDER  &kp RIGHT_PARENTHESIS
&kp K_CONTEXT_MENU  &trans                       &trans                         &trans                 &trans                                            &TD_Space  &mt LEFT_ALT BACKSPACE  &mt LEFT_GUI DEL  &mt LESS_THAN COMMA  &mt GREATER_THAN PERIOD  &mt LEFT_SHIFT N0                    &mt LC(NUMBER_0) KP_NUMBER_0  &mt LC(N0) KP_NUMBER_0  &kp KP_DOT                    &kp KP_ENTER     &kp EQUAL
            >;
        };

        Adjust_layer {
            bindings = <
&bt_0          &bt_1            &bt_2            &bt_3            &bt BT_CLR                                                                                  &none  &none  &none  &none  &none
&bt BT_DISC 0  &bt BT_DISC 1    &bt BT_DISC 2    &bt BT_DISC 3    &none            &bt BT_CLR_ALL                                                      &none  &none  &none  &none  &none  &none
&none          &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&bootloader    &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &bootloader
&none          &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF  &trans  &trans  &trans        &none  &none  &none  &none  &none  &none  &none  &none  &none
&none          &none            &none            &none            &none                             &trans  &trans  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &sys_reset
            >;
        };
    };
};
